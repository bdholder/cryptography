
class DESBase:

    def __init__(self, key=None):
        self.key = key
        if key is not None:
            self.load_key(key)

    def _finish(self, L, R):
        preoutput = (compress(L) << 32) | compress(R)
        output = ip_inverse(preoutput)
        return output.to_bytes(8, 'big')

    def _set_up(self, block):
        assert(len(block) == 8)
        assert(self.key is not None)

        intermediate = ip(int.from_bytes(block, 'big'))
        L = expand(intermediate >> 32)
        R = expand(intermediate & BLOCK_MASK)
        return L, R

    def decrypt(self, block):
        return self._main(block, False)

    def encrypt(self, block):
        return self._main(block, True)


class DES(DESBase):

    def _main(self, block, encrypt):
        L, R = self._set_up(block)

        if encrypt:
            keys = iter(self.round_keys)
        else:
            keys = reversed(self.round_keys)

        for k in keys:
            L = L ^ f(R, k)
            R = R ^ f(L, next(keys))
        L, R = R, L

        return self._finish(L, R)
            
    def load_key(self, k):
        assert(len(k) == 8)
        self.key = k
        k = int.from_bytes(k, 'big')
        self.round_keys = tuple(round_key_generator(k))


class TDES(DESBase):

    def _main(self, block, encrypt):
        L, R = self._set_up(block)

        if encrypt:
            keys = iter(self.round_keys)
        else:
            keys = reversed(self.round_keys)

        # i is just a dummy variable
        for i in range(3):                                  
            for i in range(8):
                L = L ^ f(R, next(keys))
                R = R ^ f(L, next(keys))
            L, R = R, L

        return self._finish(L, R)
    
    def load_key(self, k):
        assert(len(k) == 24)
        self.key = k
        self.round_keys = list()

        keys = int.from_bytes(k[0:8], 'big'), \
               int.from_bytes(k[8:16], 'big'), \
               int.from_bytes(k[16:24], 'big')
        
        self.round_keys.extend(round_key_generator(keys[0]))

        l = list(round_key_generator(keys[1]))
        self.round_keys.extend(reversed(l))

        self.round_keys.extend(round_key_generator(keys[2]))


shift_schedule = (1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1)

BLOCK_MASK = (1 << 32) - 1

COMPRESS = \
( 1,  2,  3,  4,
  7,  8,  9, 10,
 13, 14, 15, 16,
 19, 20, 21, 22,
 25, 26, 27, 28,
 31, 32, 33, 34,
 37, 38, 39, 40,
 43, 44, 45, 46)

# Expansion
E = \
(31,  0,  1,  2,  3,  4,
  3,  4,  5,  6,  7,  8,
  7,  8,  9, 10, 11, 12,
 11, 12, 13, 14, 15, 16,
 15, 16, 17, 18, 19, 20,
 19, 20, 21, 22, 23, 24,
 23, 24, 25, 26, 27, 28,
 27, 28, 29, 30, 31,  0)

# Initial Permutation
IP = \
(57, 49, 41, 33, 25, 17,  9,  1,
 59, 51, 43, 35, 27, 19, 11,  3,
 61, 53, 45, 37, 29, 21, 13,  5,
 63, 55, 47, 39, 31, 23, 15,  7,
 56, 48, 40, 32, 24, 16,  8,  0,
 58, 50, 42, 34, 26, 18, 10,  2,
 60, 52, 44, 36, 28, 20, 12,  4,
 62, 54, 46, 38, 30, 22, 14,  6)

# Initial Permutation inverse
IP_inverse = \
(39,  7, 47, 15, 55, 23, 63, 31,
 38,  6, 46, 14, 54, 22, 62, 30,
 37,  5, 45, 13, 53, 21, 61, 29,
 36,  4, 44, 12, 52, 20, 60, 28,
 35,  3, 43, 11, 51, 19, 59, 27,
 34,  2, 42, 10, 50, 18, 58, 26,
 33,  1, 41,  9, 49, 17, 57, 25, 
 32,  0, 40,  8, 48, 16, 56, 24)

# Permuted Choice 1 C
PC1_C = \
(28, 20, 12,  4, 61, 53, 45,
 37, 29, 21, 13,  5, 62, 54,
 46, 38, 30, 22, 14,  6, 63,
 55, 47, 39, 31, 23, 15,  7)

# Permuted Choice 1 D
PC1_D = \
(60, 52, 44, 36, 59, 51, 43,
 35, 27, 19, 11,  3, 58, 50,
 42, 34, 26, 18, 10,  2, 57,
 49, 41, 33, 25, 17,  9,  1)

# Permuted Choice 2
PC2 = \
(24, 27, 20,  6, 14, 10,
  3, 22,  0, 17,  7, 12,
  8, 23, 11,  5, 16, 26,
  1,  9, 19, 25,  4, 15,
 54, 43, 36, 29, 49, 40,
 48, 30, 52, 44, 37, 33,
 46, 35, 50, 41, 28, 53,
 51, 55, 32, 45, 39, 42)

# Substitution Boxes

S0 = \
(0x001401404000, 0x000000000000, 0x000001400000, 0x001401404004,
 0x001401400004, 0x000001404004, 0x000000000004, 0x000001400000,
 0x000000004000, 0x001401404000, 0x001401404004, 0x000000004000,
 0x001400004004, 0x001401400004, 0x001400000000, 0x000000000004,
 0x000000004004, 0x001400004000, 0x001400004000, 0x000001404000,
 0x000001404000, 0x001401400000, 0x001401400000, 0x001400004004,
 0x000001400004, 0x001400000004, 0x001400000004, 0x000001400004,
 0x000000000000, 0x000000004004, 0x000001404004, 0x001400000000,
 0x000001400000, 0x001401404004, 0x000000000004, 0x001401400000,
 0x001401404000, 0x001400000000, 0x001400000000, 0x000000004000,
 0x001401400004, 0x000001400000, 0x000001404000, 0x001400000004,
 0x000000004000, 0x000000000004, 0x001400004004, 0x000001404004,
 0x001401404004, 0x000001400004, 0x001401400000, 0x001400004004,
 0x001400000004, 0x000000004004, 0x000001404004, 0x001401404000,
 0x000000004004, 0x001400004000, 0x001400004000, 0x000000000000,
 0x000001400004, 0x000001404000, 0x000000000000, 0x001401400004)

S1 = \
(0x2000502000a0, 0x200000200000, 0x000000200000, 0x0000502000a0,
 0x000050000000, 0x0000000000a0, 0x2000500000a0, 0x2000002000a0,
 0x2000000000a0, 0x2000502000a0, 0x200050200000, 0x200000000000,
 0x200000200000, 0x000050000000, 0x0000000000a0, 0x2000500000a0,
 0x000050200000, 0x0000500000a0, 0x2000002000a0, 0x000000000000,
 0x200000000000, 0x000000200000, 0x0000502000a0, 0x200050000000,
 0x0000500000a0, 0x2000000000a0, 0x000000000000, 0x000050200000,
 0x0000002000a0, 0x200050200000, 0x200050000000, 0x0000002000a0,
 0x000000000000, 0x0000502000a0, 0x2000500000a0, 0x000050000000,
 0x2000002000a0, 0x200050000000, 0x200050200000, 0x000000200000,
 0x200050000000, 0x200000200000, 0x0000000000a0, 0x2000502000a0,
 0x0000502000a0, 0x0000000000a0, 0x000000200000, 0x200000000000,
 0x0000002000a0, 0x200050200000, 0x000050000000, 0x2000000000a0,
 0x0000500000a0, 0x2000002000a0, 0x2000000000a0, 0x0000500000a0,
 0x000050200000, 0x000000000000, 0x200000200000, 0x0000002000a0,
 0x200000000000, 0x2000500000a0, 0x2000502000a0, 0x000050200000)

S2 = \
(0x000000002808, 0x008002802800, 0x000000000000, 0x008002800008,
 0x008000002800, 0x000000000000, 0x000002802808, 0x008000002800,
 0x000002800008, 0x008000000008, 0x008000000008, 0x000002800000,
 0x008002802808, 0x000002800008, 0x008002800000, 0x000000002808,
 0x008000000000, 0x000000000008, 0x008002802800, 0x000000002800,
 0x000002802800, 0x008002800000, 0x008002800008, 0x000002802808,
 0x008000002808, 0x000002802800, 0x000002800000, 0x008000002808,
 0x000000000008, 0x008002802808, 0x000000002800, 0x008000000000,
 0x008002802800, 0x008000000000, 0x000002800008, 0x000000002808,
 0x000002800000, 0x008002802800, 0x008000002800, 0x000000000000,
 0x000000002800, 0x000002800008, 0x008002802808, 0x008000002800,
 0x008000000008, 0x000000002800, 0x000000000000, 0x008002800008,
 0x008000002808, 0x000002800000, 0x008000000000, 0x008002802808,
 0x000000000008, 0x000002802808, 0x000002802800, 0x008000000008,
 0x008002800000, 0x008000002808, 0x000000002808, 0x008002800000,
 0x000002802808, 0x000000000008, 0x008002800008, 0x000002802800)

S3 = \
(0x4002000a0001, 0x4000000a0201, 0x4000000a0201, 0x000000000200,
 0x0002000a0200, 0x400200000201, 0x400200000001, 0x4000000a0001,
 0x000000000000, 0x0002000a0000, 0x0002000a0000, 0x4002000a0201,
 0x400000000201, 0x000000000000, 0x000200000200, 0x400200000001,
 0x400000000001, 0x0000000a0000, 0x000200000000, 0x4002000a0001,
 0x000000000200, 0x000200000000, 0x4000000a0001, 0x0000000a0200,
 0x400200000201, 0x400000000001, 0x0000000a0200, 0x000200000200,
 0x0000000a0000, 0x0002000a0200, 0x4002000a0201, 0x400000000201,
 0x000200000200, 0x400200000001, 0x0002000a0000, 0x4002000a0201,
 0x400000000201, 0x000000000000, 0x000000000000, 0x0002000a0000,
 0x0000000a0200, 0x000200000200, 0x400200000201, 0x400000000001,
 0x4002000a0001, 0x4000000a0201, 0x4000000a0201, 0x000000000200,
 0x4002000a0201, 0x400000000201, 0x400000000001, 0x0000000a0000,
 0x400200000001, 0x4000000a0001, 0x0002000a0200, 0x400200000201,
 0x4000000a0001, 0x0000000a0200, 0x000200000000, 0x4002000a0001,
 0x000000000200, 0x000200000000, 0x0000000a0000, 0x0002000a0200)

S4 = \
(0x000000001400, 0x002808001400, 0x002808000000, 0x102800001400,
 0x000008000000, 0x000000001400, 0x100000000000, 0x002808000000,
 0x100008001400, 0x000008000000, 0x002800001400, 0x100008001400,
 0x102800001400, 0x102808000000, 0x000008001400, 0x100000000000,
 0x002800000000, 0x100008000000, 0x100008000000, 0x000000000000,
 0x100000001400, 0x102808001400, 0x102808001400, 0x002800001400,
 0x102808000000, 0x100000001400, 0x000000000000, 0x102800000000,
 0x002808001400, 0x002800000000, 0x102800000000, 0x000008001400,
 0x000008000000, 0x102800001400, 0x000000001400, 0x002800000000,
 0x100000000000, 0x002808000000, 0x102800001400, 0x100008001400,
 0x002800001400, 0x100000000000, 0x102808000000, 0x002808001400,
 0x100008001400, 0x000000001400, 0x002800000000, 0x102808000000,
 0x102808001400, 0x000008001400, 0x102800000000, 0x102808001400,
 0x002808000000, 0x000000000000, 0x100008000000, 0x102800000000,
 0x000008001400, 0x002800001400, 0x100000001400, 0x000008000000,
 0x000000000000, 0x100008000000, 0x002808001400, 0x100000001400)

S5 = \
(0x0a0000000050, 0x0a0100000000, 0x000000100000, 0x0a0100100050,
 0x0a0100000000, 0x000000000050, 0x0a0100100050, 0x000100000000,
 0x0a0000100000, 0x000100100050, 0x000100000000, 0x0a0000000050,
 0x000100000050, 0x0a0000100000, 0x0a0000000000, 0x000000100050,
 0x000000000000, 0x000100000050, 0x0a0000100050, 0x000000100000,
 0x000100100000, 0x0a0000100050, 0x000000000050, 0x0a0100000050,
 0x0a0100000050, 0x000000000000, 0x000100100050, 0x0a0100100000,
 0x000000100050, 0x000100100000, 0x0a0100100000, 0x0a0000000000,
 0x0a0000100000, 0x000000000050, 0x0a0100000050, 0x000100100000,
 0x0a0100100050, 0x000100000000, 0x000000100050, 0x0a0000000050,
 0x000100000000, 0x0a0000100000, 0x0a0000000000, 0x000000100050,
 0x0a0000000050, 0x0a0100100050, 0x000100100000, 0x0a0100000000,
 0x000100100050, 0x0a0100100000, 0x000000000000, 0x0a0100000050,
 0x000000000050, 0x000000100000, 0x0a0100000000, 0x000100100050,
 0x000000100000, 0x000100000050, 0x0a0000100050, 0x000000000000,
 0x0a0100100000, 0x0a0000000000, 0x000100000050, 0x0a0000100050)

S6 = \
(0x0000a0000000, 0x8040a0000002, 0x804000008002, 0x000000000000,
 0x000000008000, 0x804000008002, 0x8000a0008002, 0x0040a0008000,
 0x8040a0008002, 0x0000a0000000, 0x000000000000, 0x804000000002,
 0x800000000002, 0x004000000000, 0x8040a0000002, 0x800000008002,
 0x004000008000, 0x8000a0008002, 0x8000a0000002, 0x004000008000,
 0x804000000002, 0x0040a0000000, 0x0040a0008000, 0x8000a0000002,
 0x0040a0000000, 0x000000008000, 0x800000008002, 0x8040a0008002,
 0x0000a0008000, 0x800000000002, 0x004000000000, 0x0000a0008000,
 0x004000000000, 0x0000a0008000, 0x0000a0000000, 0x804000008002,
 0x804000008002, 0x8040a0000002, 0x8040a0000002, 0x800000000002,
 0x8000a0000002, 0x004000000000, 0x004000008000, 0x0000a0000000,
 0x0040a0008000, 0x800000008002, 0x8000a0008002, 0x0040a0008000,
 0x800000008002, 0x804000000002, 0x8040a0008002, 0x0040a0000000,
 0x0000a0008000, 0x000000000000, 0x800000000002, 0x8040a0008002,
 0x000000000000, 0x8000a0008002, 0x0040a0000000, 0x000000008000,
 0x804000000002, 0x004000008000, 0x000000008000, 0x8000a0000002)

S7 = \
(0x050000050100, 0x000000050000, 0x000004000000, 0x050004050100,
 0x050000000000, 0x050000050100, 0x000000000100, 0x050000000000,
 0x000004000100, 0x050004000000, 0x050004050100, 0x000004050000,
 0x050004050000, 0x000004050100, 0x000000050000, 0x000000000100,
 0x050004000000, 0x050000000100, 0x050000050000, 0x000000050100,
 0x000004050000, 0x000004000100, 0x050004000100, 0x050004050000,
 0x000000050100, 0x000000000000, 0x000000000000, 0x050004000100,
 0x050000000100, 0x050000050000, 0x000004050100, 0x000004000000,
 0x000004050100, 0x000004000000, 0x050004050000, 0x000000050000,
 0x000000000100, 0x050004000100, 0x000000050000, 0x000004050100,
 0x050000050000, 0x000000000100, 0x050000000100, 0x050004000000,
 0x050004000100, 0x050000000000, 0x000004000000, 0x050000050100,
 0x000000000000, 0x050004050100, 0x000004000100, 0x050000000100,
 0x050004000000, 0x050000050000, 0x050000050100, 0x000000000000,
 0x050004050100, 0x000004050000, 0x000004050000, 0x000000050100,
 0x000000050100, 0x000004000100, 0x050000000000, 0x050004050000)

S_BOXES = (S7, S6, S5, S4, S3, S2, S1, S0)


def bit(n, i):
    return 1 if n & (1 << i) else 0


def compress(block):
    return permute(block, COMPRESS)


def expand(block):
    return permute(block, E)


#DES round function
def f(block, round_key):
    block ^= round_key

    mask = 0b111111
    output = 0
    for box in S_BOXES:
        output ^= box[block & mask]
        block >>= 6

    return output


def ip(block):
    return permute(block, IP)


def ip_inverse(block):
    return permute(block, IP_inverse)


def round_key_generator(key):
    c = permute(key, PC1_C)
    d = permute(key, PC1_D)

    for s in shift_schedule:
        c = rotate_left(c, s)
        d = rotate_left(d, s)
        yield permute((c << 28) | d, PC2)


def permute(block, p):
    out = 0
    for i, p_i in enumerate(p):
        if bit(block, p_i): out |= 1 << i
    return out


def rotate_left(n, s):
    distance = 28 - s
    mask = ((1 << s) - 1) << distance
    high_bits = (n & mask) >> distance
    return ((n & ~mask) << s) | high_bits
